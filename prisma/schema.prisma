generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum WagerCategory {
  FOOTBALL
  BASKETBALL
  TENNIS
  BOXING
  GAMING
  POLITICS
  ENTERTAINMENT
  OTHERS
}

enum WagerStatus {
  PENDING
  ACTIVE
  SETTLED
  DISPUTE
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email         String  @unique
  password      String
  profileImage  String
  firstName     String
  lastName      String
  username      String  @unique
  twoFASecret   String?
  twoFAEnabled  Boolean @default(false)
  ethAddress    String
  ethPrivateKey String
  solAddress    String
  balance       Int

  @@map("users")
}

model Wager {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title      String
  conditions String
  amount     Int
  status     WagerStatus   @default(PENDING)
  category   WagerCategory
  inviteCode String        @unique
  playerOne  Int
  playerTwo  Int?
  winner     Int?

  chat Chat?

  @@map("wagers")
}

model Admin {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  email    String        @unique
  passcode String
  category WagerCategory
  disputes Int

  chats Chat[]

  @@map("admins")
}

model Chat {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  adminId Int
  admin   Admin @relation(fields: [adminId], references: [id], onDelete: Cascade)

  wagerId Int   @unique
  wager   Wager @relation(fields: [wagerId], references: [id], onDelete: Cascade)

  messages Message[]

  @@map("chats")
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  author  String
  content String

  chatId Int
  chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@map("messages")
}
